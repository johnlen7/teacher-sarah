#!/usr/bin/env python3
"""
üöÄ SARAH ENGLISH TEACHER BOT - LAUNCHER
Vers√£o atualizada com todas as melhorias implementadas
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_environment():
    """Verifica se todas as depend√™ncias est√£o configuradas"""
    
    print("üîç VERIFICANDO CONFIGURA√á√ÉO...")
    print("=" * 50)
    
    # Verificar arquivo .env
    env_file = Path('.env')
    if not env_file.exists():
        print("‚ùå Arquivo .env n√£o encontrado!")
        print("üí° Copie .env.example para .env e configure suas chaves")
        return False
    
    # Carregar .env
    from dotenv import load_dotenv
    load_dotenv()
    
    # Verificar chaves essenciais
    telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
    openrouter_key = os.getenv('OPENROUTER_API_KEY')
    
    if not telegram_token:
        print("‚ùå TELEGRAM_BOT_TOKEN n√£o configurado!")
        return False
    
    if not openrouter_key:
        print("‚ö†Ô∏è OPENROUTER_API_KEY n√£o configurado - usando apenas GPT4All local")
    
    print(f"‚úÖ Telegram Bot Token: {telegram_token[:20]}...")
    print(f"‚úÖ OpenRouter API Key: {openrouter_key[:20] if openrouter_key else 'N√£o configurado'}...")
    print(f"‚úÖ GPT4All Local: {'Habilitado' if os.getenv('USE_GPT4ALL', 'false').lower() == 'true' else 'Desabilitado'}")
    
    return True

def check_services():
    """Verifica se os servi√ßos externos est√£o funcionando"""
    
    print(f"\nüîß VERIFICANDO SERVI√áOS...")
    print("-" * 30)
    
    # Verificar Whisper
    try:
        import requests
        whisper_response = requests.get('http://localhost:5001/health', timeout=3)
        if whisper_response.status_code == 200:
            print("‚úÖ Whisper API: Funcionando")
        else:
            print("‚ö†Ô∏è Whisper API: N√£o est√° rodando")
            print("üí° Execute: cd whisper && python app.py")
    except:
        print("‚ö†Ô∏è Whisper API: N√£o est√° rodando")
        print("üí° Execute: cd whisper && python app.py")
    
    # Verificar GPT4All (se habilitado)
    use_gpt4all = os.getenv('USE_GPT4ALL', 'false').lower() == 'true'
    if use_gpt4all:
        try:
            import requests
            gpt4all_response = requests.get('http://localhost:4891/v1/models', timeout=3)
            if gpt4all_response.status_code == 200:
                print("‚úÖ GPT4All Local: Funcionando")
            else:
                print("‚ö†Ô∏è GPT4All Local: N√£o est√° rodando")
        except:
            print("‚ö†Ô∏è GPT4All Local: N√£o est√° rodando")
            print("üí° Inicie o GPT4All Server primeiro")

async def start_bot():
    """Inicia o bot Sarah"""
    
    print(f"\nü§ñ INICIANDO SARAH ENGLISH TEACHER BOT...")
    print("=" * 50)
    
    try:
        # Importar e inicializar o bot
        from bot.main import main
        await main()
        
    except KeyboardInterrupt:
        print(f"\nüëã Bot encerrado pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro ao iniciar o bot: {e}")
        logger.exception("Erro detalhado:")

def show_info():
    """Mostra informa√ß√µes sobre as melhorias"""
    
    print("üéâ SARAH 2.0 - MELHORIAS IMPLEMENTADAS")
    print("=" * 50)
    print("‚úÖ Sarah mais jovem e divertida (28 anos)")
    print("‚úÖ Refer√™ncias a cultura jovem (Marvel, K-pop, Games)")
    print("‚úÖ Sistema de mem√≥ria individual por usu√°rio")
    print("‚úÖ M√∫ltiplas APIs com fallback autom√°tico")
    print("‚úÖ Indicadores visuais de grava√ß√£o de √°udio")
    print("‚úÖ Modelo DeepSeek R1 atualizado via OpenRouter")
    print("‚úÖ Headers corretos para melhor performance")
    print("‚úÖ Corre√ß√µes mais did√°ticas e divertidas")
    print("")

if __name__ == "__main__":
    # Banner inicial
    print("üåü" * 20)
    print("  SARAH ENGLISH TEACHER BOT")
    print("     Vers√£o 2.0 Atualizada")
    print("üåü" * 20)
    print("")
    
    # Mostrar melhorias
    show_info()
    
    # Verificar configura√ß√£o
    if not check_environment():
        sys.exit(1)
    
    # Verificar servi√ßos
    check_services()
    
    # Iniciar bot
    try:
        asyncio.run(start_bot())
    except KeyboardInterrupt:
        print(f"\nüëã Tchau! Sarah est√° sempre pronta para ensinar! üéì‚ú®")
